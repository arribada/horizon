#!/usr/bin/python3

import argparse
import traceback
import logging
import sys
from arribada_tools import gps_config, backend, interface

parser = argparse.ArgumentParser()
parser.add_argument('--serial', required=False)
parser.add_argument('--baud', default=115200, type=int, required=False)
parser.add_argument('--ble_addr', dest='bluetooth_addr', required=False)
parser.add_argument('--file', type=argparse.FileType('rb'), required=True)
parser.add_argument('--debug', action='store_true', required=False)
args = parser.parse_args()

if not any(vars(args).values()):
    parser.print_help()
    sys.exit(2)

try:

    if args.debug:
        logging.basicConfig(format='%(asctime)s\t%(module)s\t%(levelname)s\t%(message)s', level=logging.DEBUG)
    else:
        logging.basicConfig(format='%(asctime)s\t%(module)s\t%(levelname)s\t%(message)s', level=logging.WARN)
    
    bridged_backend = None
    gps_backend = None
    
    if args.serial:
        gps_backend = gps_config.GPSSerialBackend(args.serial, baudrate=args.baud)
    else:
        if args.bluetooth_addr:
            bridged_backend = backend.BackendBluetooth(dev_addr=args.bluetooth_addr)
        else:
            bridged_backend = backend.BackendUsb()
        gps_backend = gps_config.GPSBridgedBackend(bridged_backend)
        interface.ConfigInterface(bridged_backend).gps_config(True)
    
    gps_backend.read(1024)
    mga_ano_data = args.file.read()
    cfg = gps_config.GPSConfig(gps_backend)
    cfg.mga_ano_session(mga_ano_data)
    
    if bridged_backend:
        interface.ConfigInterface(bridged_backend).gps_config(False)
    
except:
    if args.debug:
        traceback.print_exc()
    else:
        print("Unexpected error: %s" % str(sys.exc_info()))
    sys.exit(1)
finally:
    if bridged_backend:
        bridged_backend.cleanup()
    
    if gps_backend:
        gps_backend.cleanup()
