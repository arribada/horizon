#!/usr/bin/python3

import argparse
import logging
import binascii
from arribada_tools import gps_config, ubx, backend, interface

parser = argparse.ArgumentParser()
parser.add_argument('--serial', required=False)
parser.add_argument('--baud', default=115200, type=int, required=False)
parser.add_argument('--ble_addr', dest='bluetooth_addr', required=False)
parser.add_argument('--debug', action='store_true', required=False)
parser.add_argument('--new_baud', type=int, required=True)
args = parser.parse_args()

if args.debug:
    logging.basicConfig(format='%(asctime)s\t%(module)s\t%(levelname)s\t%(message)s', level=logging.DEBUG)

bridged_backend = None

if args.serial:
    gps_backend = gps_config.GPSSerialBackend(args.serial, baudrate=args.baud)
else:
    if args.bluetooth_addr:
        bridged_backend = backend.BackendBluetooth(dev_addr=args.bluetooth_addr)
    else:
        bridged_backend = backend.BackendUsb()
    gps_backend = gps_config.GPSBridgedBackend(bridged_backend)
    interface.ConfigInterface(bridged_backend).gps_config(True)

msg = ubx.ubx_cfg_uart(args.new_baud)
logging.debug('TX: %s: len=%u: %s', ubx.ubx_to_string(msg), len(msg), binascii.hexlify(msg))
gps_backend.write(msg)

# If we are bridged then we need to send an updated UART baud rate
# to ensure that the GPS/MCU configuration remains in sync
if bridged_backend:
    cfg = interface.ConfigInterface(bridged_backend)
    cfg.write_json_configuration('{"gps": {"uartBaudRate": %u}}' % args.new_baud)
    cfg.save_configuration() # Save this new Baudrate to the stm32 FLASH

# Save the updated baudrate to m8n flash
msg = ubx.ubx_cfg_save_flash()
logging.debug('TX: %s: len=%u: %s', ubx.ubx_to_string(msg), len(msg), binascii.hexlify(msg))
gps_backend.write(msg)

if bridged_backend:
    cfg.gps_config(False) # Turn off GPS bridging
    bridged_backend.cleanup()

if gps_backend:
    gps_backend.cleanup()
